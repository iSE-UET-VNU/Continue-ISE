{"prompt":"package net.xenyria.eem.networking;\n\nimport net.xenyria.eem.discord.DiscordRichPresenceIntegration;\nimport net.fabricmc.fabric.api.client.networking.v1.ClientPlayNetworking;\nimport net.minecraft.util.Identifier;\nimport net.xenyria.eem.EXenyriaServerType;\nimport net.xenyria.eem.PlayingSessionInformation;\nimport net.xenyria.eem.config.screen.XenyriaConfigManager;\nimport org.json.JSONObject;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Logger;\n\npublic class PacketListener {\n\n    public static Identifier ID;\n    public static Logger LOGGER = Logger.getLogger(\"Xenyria\/PacketListener\");\n\n    public static void initialize() {\n        ID = Identifier.of(\"xenyria\", \"mod_communication\");\n        if(ID == null) throw new IllegalStateException(\"Identifier could not be initialized.\");\n\n        LOGGER.info(\"Registering packet receiver for plugin messages...\");\n        ClientPlayNetworking.registerGlobalReceiver(\n                ID, (client, handler, buf, responseSender) -> {\n                    \/*\n                     * Packets sent by the server consist of a 4-byte Integer\n                     * and a byte array that represents UTF-8 string data.\n                     *\/\n                    int bytesToRead = buf.readInt();\n                    \/\/ Allocate enough memory for reading the raw JSON string in the next step\n                    byte[] buffer = new byte[bytesToRead];\n                    buf.readBytes(buffer);\n                    \/\/ Create a UTF-8 string from the received data\n                    String rawJsonText = new String(buffer, StandardCharsets.UTF_8);\n\n                    \/\/ Try to parse the packet\n                    XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);\n                    if(packet == null) {\n                        LOGGER.warning(\"Unable to parse Xenyria packet with \" + bytesToRead + \" length.\");\n                        return;\n                    }\n\n                    \/\/ Do something with the received data\n                    if (packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {\n                        \/\/ If rich presence is disabled in the settings we ignore this packet\n                        if (!","groundtruth":"XenyriaConfigManager.getConfig().enableDiscordRichPresence) {","right_context":"\n                            return;\n                        }\n                        DiscordRichPresenceIntegration.setLastReceivedRichPresence(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_INIT) {\n                        \/\/ Orion sends one mod handshake packet on login\n                        \/\/ This packet contains the current server ID\n                        String instanceId = packet.getData().getString(\"server_id\");\n                        PlayingSessionInformation.setServerInstanceId(instanceId);\n                        PlayingSessionInformation.setOnNetwork(true);\n                        PlayingSessionInformation.setCurrentServerType(\n                                EXenyriaServerType.determineServerType(instanceId)\n                        );\n\n                        \/\/ We respond back so that the server knows we're using XEEM\n                        XenyriaServerPacket responsePacket = new XenyriaServerPacket(\n                                XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE,\n                                new JSONObject()\n                        );\n                        responsePacket.sendToServer();\n                        LOGGER.info(\"Successfully completed handshake with Orion\");\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {\n                        LOGGER.info(\"Current network state: \" + PlayingSessionInformation.isOnNetwork());\n                        LOGGER.info(\"Current server type: \" + PlayingSessionInformation.getCurrentServerType());\n                        LOGGER.info(\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());\n                    }\n                }\n        );\n    }\n\n}\n","metadata":{"task_id":"project_cc_java\/6325","repository":"XenyriaNET-xeem-b635ea0","file":"src\/main\/java\/net\/xenyria\/eem\/networking\/PacketListener.java","context_start_lineno":0,"groundtruth_start_lineno":46,"right_context_start_lineno":47},"repo":"XenyriaNET-xeem-b635ea0","commit":"b635ea0","encode":"XenyriaNET--xeem--b635ea0","model_name":"codestral-latest","built_prompt":"[SUFFIX]\n                            return;\n                        }\n                        DiscordRichPresenceIntegration.setLastReceivedRichPresence(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_INIT) {\n                        \/\/ Orion sends one mod handshake packet on login\n                        \/\/ This packet contains the current server ID\n                        String instanceId = packet.getData().getString(\"server_id\");\n                        PlayingSessionInformation.setServerInstanceId(instanceId);\n                        PlayingSessionInformation.setOnNetwork(true);\n                        PlayingSessionInformation.setCurrentServerType(\n                                EXenyriaServerType.determineServerType(instanceId)\n                        );\n\n                        \/\/ We respond back so that the server knows we're using XEEM\n                        XenyriaServerPacket responsePacket = new XenyriaServerPacket(\n                                XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE,\n                                new JSONObject()\n                        );\n                        responsePacket.sendToServer();[PREFIX]package net.xenyria.eem.networking;\n\nimport net.xenyria.eem.discord.DiscordRichPresenceIntegration;\nimport net.fabricmc.fabric.api.client.networking.v1.ClientPlayNetworking;\nimport net.minecraft.util.Identifier;\nimport net.xenyria.eem.EXenyriaServerType;\nimport net.xenyria.eem.PlayingSessionInformation;\nimport net.xenyria.eem.config.screen.XenyriaConfigManager;\nimport org.json.JSONObject;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Logger;\n\npublic class PacketListener {\n\n    public static Identifier ID;\n    public static Logger LOGGER = Logger.getLogger(\"Xenyria\/PacketListener\");\n\n    public static void initialize() {\n        ID = Identifier.of(\"xenyria\", \"mod_communication\");\n        if(ID == null) throw new IllegalStateException(\"Identifier could not be initialized.\");\n\n        LOGGER.info(\"Registering packet receiver for plugin messages...\");\n        ClientPlayNetworking.registerGlobalReceiver(\n                ID, (client, handler, buf, responseSender) -> {\n                    \/*\n                     * Packets sent by the server consist of a 4-byte Integer\n                     * and a byte array that represents UTF-8 string data.\n                     *\/\n                    int bytesToRead = buf.readInt();\n                    \/\/ Allocate enough memory for reading the raw JSON string in the next step\n                    byte[] buffer = new byte[bytesToRead];\n                    buf.readBytes(buffer);\n                    \/\/ Create a UTF-8 string from the received data\n                    String rawJsonText = new String(buffer, StandardCharsets.UTF_8);\n\n                    \/\/ Try to parse the packet\n                    XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);\n                    if(packet == null) {\n                        LOGGER.warning(\"Unable to parse Xenyria packet with \" + bytesToRead + \" length.\");\n                        return;\n                    }\n\n                    \/\/ Do something with the received data\n                    if (packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {\n                        \/\/ If rich presence is disabled in the settings we ignore this packet\n                        if (!","lsp_snippets":[],"import_snippets":[],"root_path_context_snippets":[],"prefix":"package net.xenyria.eem.networking;\n\nimport net.xenyria.eem.discord.DiscordRichPresenceIntegration;\nimport net.fabricmc.fabric.api.client.networking.v1.ClientPlayNetworking;\nimport net.minecraft.util.Identifier;\nimport net.xenyria.eem.EXenyriaServerType;\nimport net.xenyria.eem.PlayingSessionInformation;\nimport net.xenyria.eem.config.screen.XenyriaConfigManager;\nimport org.json.JSONObject;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.logging.Logger;\n\npublic class PacketListener {\n\n    public static Identifier ID;\n    public static Logger LOGGER = Logger.getLogger(\"Xenyria\/PacketListener\");\n\n    public static void initialize() {\n        ID = Identifier.of(\"xenyria\", \"mod_communication\");\n        if(ID == null) throw new IllegalStateException(\"Identifier could not be initialized.\");\n\n        LOGGER.info(\"Registering packet receiver for plugin messages...\");\n        ClientPlayNetworking.registerGlobalReceiver(\n                ID, (client, handler, buf, responseSender) -> {\n                    \/*\n                     * Packets sent by the server consist of a 4-byte Integer\n                     * and a byte array that represents UTF-8 string data.\n                     *\/\n                    int bytesToRead = buf.readInt();\n                    \/\/ Allocate enough memory for reading the raw JSON string in the next step\n                    byte[] buffer = new byte[bytesToRead];\n                    buf.readBytes(buffer);\n                    \/\/ Create a UTF-8 string from the received data\n                    String rawJsonText = new String(buffer, StandardCharsets.UTF_8);\n\n                    \/\/ Try to parse the packet\n                    XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);\n                    if(packet == null) {\n                        LOGGER.warning(\"Unable to parse Xenyria packet with \" + bytesToRead + \" length.\");\n                        return;\n                    }\n\n                    \/\/ Do something with the received data\n                    if (packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {\n                        \/\/ If rich presence is disabled in the settings we ignore this packet\n                        if (!","suffix":"\n                            return;\n                        }\n                        DiscordRichPresenceIntegration.setLastReceivedRichPresence(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_INIT) {\n                        \/\/ Orion sends one mod handshake packet on login\n                        \/\/ This packet contains the current server ID\n                        String instanceId = packet.getData().getString(\"server_id\");\n                        PlayingSessionInformation.setServerInstanceId(instanceId);\n                        PlayingSessionInformation.setOnNetwork(true);\n                        PlayingSessionInformation.setCurrentServerType(\n                                EXenyriaServerType.determineServerType(instanceId)\n                        );\n\n                        \/\/ We respond back so that the server knows we're using XEEM\n                        XenyriaServerPacket responsePacket = new XenyriaServerPacket(\n                                XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE,\n                                new JSONObject()\n                        );\n                        responsePacket.sendToServer();","completion_options":{"stop":["[PREFIX]","[SUFFIX]","\/src\/","#- coding: utf-8","```"]}}
