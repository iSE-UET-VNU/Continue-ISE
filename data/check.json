{
    "prompt": "package com.brinquedomania.api.controllers;\n\nimport com.brinquedomania.api.dtos.CartRecordDto;\nimport com.brinquedomania.api.models.CartModel;\nimport com.brinquedomania.api.models.ProductModel;\nimport com.brinquedomania.api.repositories.CartRepository;\nimport com.brinquedomania.api.repositories.ProductRepository;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.UUID;\n\n\/**\n * Classe responsavel por implementar as rotas do CONTROLLER do carrinho de compras.\n *\/\n@RestController\n@CrossOrigin(origins = \"*\")\npublic class CartController {\n\n    \/**\n     * Atributo responsavel por realizar as operacoes de CRUD do carrinho de compras no banco de dados\n     *\/\n    @Autowired\n    CartRepository cartRepository;\n\n    \/**\n     * Atributo responsavel por realizar as operacoes de CRUD do produto no banco de dados\n     *\/\n    @Autowired\n    ProductRepository productRepository;\n\n    \/**\n     * Metodo\/Rota responsavel por criar um carrinho de compras\n     * @param cartRecordDto DTO com os dados do carrinho de compras\n     * @return Carrinho de compras criado\n     *\/\n    @PostMapping(\"\/cart\/creat\")\n    public ResponseEntity<Object> saveCart(@RequestBody @Valid CartRecordDto cartRecordDto){\n        \n        var cartModel = new CartModel();\n        \n        float amount = 0F;\n        BeanUtils.copyProperties(cartRecordDto, cartModel);\n\n        Map<",
    "groundtruth": "UUID, Integer> idsProducts = cartModel.getIdsProducts();",
    "right_context": "\n\n        for (Map.Entry<UUID, Integer> entry : idsProducts.entrySet()) {\n            UUID idProduct = entry.getKey();\n            int quantidade = entry.getValue();\n\n            Optional<ProductModel> product = productRepository.findById(idProduct);\n\n            if (product.isPresent()){\n                amount += product.get().getValue() * quantidade;\n            }\n        }\n\n        cartModel.setAmount(amount);\n\n        return ResponseEntity.status(HttpStatus.CREATED).body(cartRepository.save(cartModel));\n    }\n\n    \/**\n     * Metodo\/Rota responsavel por acessar um carrinho de compras pelo ID do cliente\n     * @param idClient ID do cliente\n     * @return Carrinho de compras do cliente ou mensagem de erro\n     *\/\n    @GetMapping(\"\/cart\/readByIdUser\/{idClient}\")\n    public ResponseEntity<Object> readCart(@PathVariable UUID idClient){\n\n        Optional<CartModel> cart = cartRepository.findByIdClient(idClient);\n\n        if (cart.isEmpty()){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Seu carrinho de compras esta vazio\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(cart);\n    }\n\n\n    \/**\n     * Metodo\/Rota responsavel por editar um carrinho de compras (adicionar ou remover produtos)\n     * @return novo carrinho de compras\n     *\/\n    @PutMapping(\"\/cart\/edit\")\n    public ResponseEntity<Object> updateCart(@RequestBody Map<String, Object> requestBody){\n\n        UUID idClient = UUID.fromString( (String) requestBody.get(\"idClient\"));\n        UUID idProduct = UUID.fromString( (String) requestBody.get(\"idProduct\"));\n        String action = (String) requestBody.get(\"action\");\n\n        Optional<CartModel> newCart = cartRepository.findByIdClient(idClient);\n        System.out.println(newCart);\n        if (newCart.isPresent()){\n            var products = newCart.get().getIdsProducts();\n\n            \/**\n             * Verifica se o produto ja esta no carrinho de compras\n             * Se estiver, adiciona mais uma unidade\n             * Se n\u00e3o estiver, adiciona o produto com uma unidade\n             *\/\n            if (action.equals(\"add\")){\n                if (products.containsKey(idProduct)){\n                    products.put(idProduct, products.get(idProduct) + 1);\n                }\n                else {\n                    newCart.get().addProduct(idProduct, 1);\n                }\n                Float value = productRepository.findById(idProduct).get().getValue();\n                newCart.get().setAmount(newCart.get().getAmount() + value);\n            }\n\n            \/**\n             * Verifica se o produto esta no carrinho de compras\n             * Se estiver, remove uma unidade\n             * Se n\u00e3o estiver, retorna mensagem de erro\n             *\/\n            else if (action.equals(\"remove\")) {\n                products.put(idProduct, products.get(idProduct) - 1);\n                Float value = productRepository.findById(idProduct).get().getValue();\n                newCart.get().setAmount(newCart.get().getAmount() - value);\n                if (products.get(idProduct) == 0){\n                    products.remove(idProduct);\n                }\n                if (newCart.get().getIdsProducts().isEmpty()){\n                    newCart.get().setAmount(0.0F);\n                }\n            }\n            newCart.get().setIdsProducts(products);\n        }\n\n        return ResponseEntity.status(HttpStatus.OK).body(cartRepository.save(newCart.get()));\n    }\n\n    \/**\n     * Metodo\/Rota responsavel por listar todos os carrinhos de compras\n     * @return lista com todos os carrinhos de compras\n     *\/\n    @GetMapping(\"\/cart\/listAll\")\n    public ResponseEntity<List<CartModel>> getAllCarts() {\n        return ResponseEntity.status(HttpStatus.OK).body(cartRepository.findAll());\n    }\n\n}\n",
    "metadata": {
        "task_id": "project_cc_java\/2058",
        "repository": "Francisco-Jean-API-BRINQUEDOMANIA-0013ce2",
        "file": "src\/main\/java\/com\/brinquedomania\/api\/controllers\/CartController.java",
        "context_start_lineno": 0,
        "groundtruth_start_lineno": 51,
        "right_context_start_lineno": 52
    },
    "repo": "Francisco-Jean-API-BRINQUEDOMANIA-0013ce2",
    "commit": "0013ce2",
    "encode": "Francisco-Jean--API-BRINQUEDOMANIA--0013ce2",
    "0": "{\"model_name\":\"codestral-latest\",\"built_prompt\":\"[SUFFIX]\\n\\n        for (Map.Entry<UUID, Integer> entry : idsProducts.entrySet()) {\\n            UUID idProduct = entry.getKey();\\n            int quantidade = entry.getValue();\\n\\n            Optional<ProductModel> product = productRepository.findById(idProduct);\\n\\n            if (product.isPresent()){\\n                amount += product.get().getValue() * quantidade;\\n            }\\n        }\\n\\n        cartModel.setAmount(amount);\\n[PREFIX] *\/\\n@RestController\\n@CrossOrigin(origins = \\\"*\\\")\\npublic class CartController {\\n\\n    \/**\\n     * Atributo responsavel por realizar as operacoes de CRUD do carrinho de compras no banco de dados\\n     *\/\\n    @Autowired\\n    CartRepository cartRepository;\\n\\n    \/**\\n     * Atributo responsavel por realizar as operacoes de CRUD do produto no banco de dados\\n     *\/\\n    @Autowired\\n    ProductRepository productRepository;\\n\\n    \/**\\n     * Metodo\/Rota responsavel por criar um carrinho de compras\\n     * @param cartRecordDto DTO com os dados do carrinho de compras\\n     * @return Carrinho de compras criado\\n     *\/\\n    @PostMapping(\\\"\/cart\/creat\\\")\\n    public ResponseEntity<Object> saveCart(@RequestBody @Valid CartRecordDto cartRecordDto){\\n        \\n        var cartModel = new CartModel();\\n        \\n        float amount = 0F;\\n        BeanUtils.copyProperties(cartRecordDto, cartModel);\\n\\n        Map<\",\"lsp_snippets\":[],\"import_snippets\":[],\"root_path_context_snippets\":[],\"prefix\":\" *\/\\n@RestController\\n@CrossOrigin(origins = \\\"*\\\")\\npublic class CartController {\\n\\n    \/**\\n     * Atributo responsavel por realizar as operacoes de CRUD do carrinho de compras no banco de dados\\n     *\/\\n    @Autowired\\n    CartRepository cartRepository;\\n\\n    \/**\\n     * Atributo responsavel por realizar as operacoes de CRUD do produto no banco de dados\\n     *\/\\n    @Autowired\\n    ProductRepository productRepository;\\n\\n    \/**\\n     * Metodo\/Rota responsavel por criar um carrinho de compras\\n     * @param cartRecordDto DTO com os dados do carrinho de compras\\n     * @return Carrinho de compras criado\\n     *\/\\n    @PostMapping(\\\"\/cart\/creat\\\")\\n    public ResponseEntity<Object> saveCart(@RequestBody @Valid CartRecordDto cartRecordDto){\\n        \\n        var cartModel = new CartModel();\\n        \\n        float amount = 0F;\\n        BeanUtils.copyProperties(cartRecordDto, cartModel);\\n\\n        Map<\",\"suffix\":\"\\n\\n        for (Map.Entry<UUID, Integer> entry : idsProducts.entrySet()) {\\n            UUID idProduct = entry.getKey();\\n            int quantidade = entry.getValue();\\n\\n            Optional<ProductModel> product = productRepository.findById(idProduct);\\n\\n            if (product.isPresent()){\\n                amount += product.get().getValue() * quantidade;\\n            }\\n        }\\n\\n        cartModel.setAmount(amount);\\n\",\"completion_options\":{\"stop\":[\"[PREFIX]\",\"[SUFFIX]\",\"\/src\/\",\"#- coding: utf-8\",\"```\"]}}"
}