{"prompt":"package com.brinquedomania.api.controllers;\n\nimport com.brinquedomania.api.dtos.CartRecordDto;\nimport com.brinquedomania.api.models.CartModel;\nimport com.brinquedomania.api.models.ProductModel;\nimport com.brinquedomania.api.repositories.CartRepository;\nimport com.brinquedomania.api.repositories.ProductRepository;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.UUID;\n\n\/**\n * Classe responsavel por implementar as rotas do CONTROLLER do carrinho de compras.\n *\/\n@RestController\n@CrossOrigin(origins = \"*\")\npublic class CartController {\n\n    \/**\n     * Atributo responsavel por realizar as operacoes de CRUD do carrinho de compras no banco de dados\n     *\/\n    @Autowired\n    CartRepository cartRepository;\n\n    \/**\n     * Atributo responsavel por realizar as operacoes de CRUD do produto no banco de dados\n     *\/\n    @Autowired\n    ProductRepository productRepository;\n\n    \/**\n     * Metodo\/Rota responsavel por criar um carrinho de compras\n     * @param cartRecordDto DTO com os dados do carrinho de compras\n     * @return Carrinho de compras criado\n     *\/\n    @PostMapping(\"\/cart\/creat\")\n    public ResponseEntity<Object> saveCart(@RequestBody @Valid CartRecordDto cartRecordDto){\n        \n        var cartModel = new CartModel();\n        \n        float amount = 0F;\n        BeanUtils.copyProperties(cartRecordDto, cartModel);\n\n        Map<","groundtruth":"UUID, Integer> idsProducts = cartModel.getIdsProducts();","right_context":"\n\n        for (Map.Entry<UUID, Integer> entry : idsProducts.entrySet()) {\n            UUID idProduct = entry.getKey();\n            int quantidade = entry.getValue();\n\n            Optional<ProductModel> product = productRepository.findById(idProduct);\n\n            if (product.isPresent()){\n                amount += product.get().getValue() * quantidade;\n            }\n        }\n\n        cartModel.setAmount(amount);\n\n        return ResponseEntity.status(HttpStatus.CREATED).body(cartRepository.save(cartModel));\n    }\n\n    \/**\n     * Metodo\/Rota responsavel por acessar um carrinho de compras pelo ID do cliente\n     * @param idClient ID do cliente\n     * @return Carrinho de compras do cliente ou mensagem de erro\n     *\/\n    @GetMapping(\"\/cart\/readByIdUser\/{idClient}\")\n    public ResponseEntity<Object> readCart(@PathVariable UUID idClient){\n\n        Optional<CartModel> cart = cartRepository.findByIdClient(idClient);\n\n        if (cart.isEmpty()){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Seu carrinho de compras esta vazio\");\n        }\n        return ResponseEntity.status(HttpStatus.OK).body(cart);\n    }\n\n\n    \/**\n     * Metodo\/Rota responsavel por editar um carrinho de compras (adicionar ou remover produtos)\n     * @return novo carrinho de compras\n     *\/\n    @PutMapping(\"\/cart\/edit\")\n    public ResponseEntity<Object> updateCart(@RequestBody Map<String, Object> requestBody){\n\n        UUID idClient = UUID.fromString( (String) requestBody.get(\"idClient\"));\n        UUID idProduct = UUID.fromString( (String) requestBody.get(\"idProduct\"));\n        String action = (String) requestBody.get(\"action\");\n\n        Optional<CartModel> newCart = cartRepository.findByIdClient(idClient);\n        System.out.println(newCart);\n        if (newCart.isPresent()){\n            var products = newCart.get().getIdsProducts();\n\n            \/**\n             * Verifica se o produto ja esta no carrinho de compras\n             * Se estiver, adiciona mais uma unidade\n             * Se n\u00e3o estiver, adiciona o produto com uma unidade\n             *\/\n            if (action.equals(\"add\")){\n                if (products.containsKey(idProduct)){\n                    products.put(idProduct, products.get(idProduct) + 1);\n                }\n                else {\n                    newCart.get().addProduct(idProduct, 1);\n                }\n                Float value = productRepository.findById(idProduct).get().getValue();\n                newCart.get().setAmount(newCart.get().getAmount() + value);\n            }\n\n            \/**\n             * Verifica se o produto esta no carrinho de compras\n             * Se estiver, remove uma unidade\n             * Se n\u00e3o estiver, retorna mensagem de erro\n             *\/\n            else if (action.equals(\"remove\")) {\n                products.put(idProduct, products.get(idProduct) - 1);\n                Float value = productRepository.findById(idProduct).get().getValue();\n                newCart.get().setAmount(newCart.get().getAmount() - value);\n                if (products.get(idProduct) == 0){\n                    products.remove(idProduct);\n                }\n                if (newCart.get().getIdsProducts().isEmpty()){\n                    newCart.get().setAmount(0.0F);\n                }\n            }\n            newCart.get().setIdsProducts(products);\n        }\n\n        return ResponseEntity.status(HttpStatus.OK).body(cartRepository.save(newCart.get()));\n    }\n\n    \/**\n     * Metodo\/Rota responsavel por listar todos os carrinhos de compras\n     * @return lista com todos os carrinhos de compras\n     *\/\n    @GetMapping(\"\/cart\/listAll\")\n    public ResponseEntity<List<CartModel>> getAllCarts() {\n        return ResponseEntity.status(HttpStatus.OK).body(cartRepository.findAll());\n    }\n\n}\n","metadata":{"task_id":"project_cc_java\/2058","repository":"Francisco-Jean-API-BRINQUEDOMANIA-0013ce2","file":"src\/main\/java\/com\/brinquedomania\/api\/controllers\/CartController.java","context_start_lineno":0,"groundtruth_start_lineno":51,"right_context_start_lineno":52},"repo":"Francisco-Jean-API-BRINQUEDOMANIA-0013ce2","commit":"0013ce2","encode":"Francisco-Jean--API-BRINQUEDOMANIA--0013ce2","builder_output":"{\"model_name\":\"codestral-latest\",\"built_prompt\":\"[SUFFIX]\\n\\n        for (Map.Entry<UUID, Integer> entry : idsProducts.entrySet()) {\\n            UUID idProduct = entry.getKey();\\n            int quantidade = entry.getValue();\\n\\n            Optional<ProductModel> product = productRepository.findById(idProduct);\\n\\n            if (product.isPresent()){\\n                amount += product.get().getValue() * quantidade;\\n            }\\n        }\\n\\n        cartModel.setAmount(amount);\\n[PREFIX] *\/\\n@RestController\\n@CrossOrigin(origins = \\\"*\\\")\\npublic class CartController {\\n\\n    \/**\\n     * Atributo responsavel por realizar as operacoes de CRUD do carrinho de compras no banco de dados\\n     *\/\\n    @Autowired\\n    CartRepository cartRepository;\\n\\n    \/**\\n     * Atributo responsavel por realizar as operacoes de CRUD do produto no banco de dados\\n     *\/\\n    @Autowired\\n    ProductRepository productRepository;\\n\\n    \/**\\n     * Metodo\/Rota responsavel por criar um carrinho de compras\\n     * @param cartRecordDto DTO com os dados do carrinho de compras\\n     * @return Carrinho de compras criado\\n     *\/\\n    @PostMapping(\\\"\/cart\/creat\\\")\\n    public ResponseEntity<Object> saveCart(@RequestBody @Valid CartRecordDto cartRecordDto){\\n        \\n        var cartModel = new CartModel();\\n        \\n        float amount = 0F;\\n        BeanUtils.copyProperties(cartRecordDto, cartModel);\\n\\n        Map<\",\"snippets\":[[],[]],\"prefix\":\" *\/\\n@RestController\\n@CrossOrigin(origins = \\\"*\\\")\\npublic class CartController {\\n\\n    \/**\\n     * Atributo responsavel por realizar as operacoes de CRUD do carrinho de compras no banco de dados\\n     *\/\\n    @Autowired\\n    CartRepository cartRepository;\\n\\n    \/**\\n     * Atributo responsavel por realizar as operacoes de CRUD do produto no banco de dados\\n     *\/\\n    @Autowired\\n    ProductRepository productRepository;\\n\\n    \/**\\n     * Metodo\/Rota responsavel por criar um carrinho de compras\\n     * @param cartRecordDto DTO com os dados do carrinho de compras\\n     * @return Carrinho de compras criado\\n     *\/\\n    @PostMapping(\\\"\/cart\/creat\\\")\\n    public ResponseEntity<Object> saveCart(@RequestBody @Valid CartRecordDto cartRecordDto){\\n        \\n        var cartModel = new CartModel();\\n        \\n        float amount = 0F;\\n        BeanUtils.copyProperties(cartRecordDto, cartModel);\\n\\n        Map<\",\"suffix\":\"\\n\\n        for (Map.Entry<UUID, Integer> entry : idsProducts.entrySet()) {\\n            UUID idProduct = entry.getKey();\\n            int quantidade = entry.getValue();\\n\\n            Optional<ProductModel> product = productRepository.findById(idProduct);\\n\\n            if (product.isPresent()){\\n                amount += product.get().getValue() * quantidade;\\n            }\\n        }\\n\\n        cartModel.setAmount(amount);\\n\",\"completion_options\":{\"stop\":[\"[PREFIX]\",\"[SUFFIX]\",\"\/src\/\",\"#- coding: utf-8\",\"```\"]}}"}
{"prompt":"\/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2023 Objectionary.com\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\/\npackage org.objectionary.parsing;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport org.objectionary.Tokenizer;\nimport org.objectionary.entities.Data;\nimport org.objectionary.entities.Empty;\nimport org.objectionary.entities.Entity;\nimport org.objectionary.entities.FlatObject;\nimport org.objectionary.entities.Lambda;\nimport org.objectionary.entities.Locator;\nimport org.objectionary.entities.NestedObject;\nimport org.objectionary.tokens.BracketToken;\nimport org.objectionary.tokens.StringToken;\nimport org.objectionary.tokens.Token;\n\n\/**\n * Entities reader.\n * @since 0.1.0\n * @checkstyle NonStaticMethodCheck (100 lines)\n *\/\npublic final class Entities {\n\n    \/**\n     * The tokenizer.\n     *\/\n    @SuppressWarnings({\"PMD.UnusedPrivateField\", \"PMD.SingularField\"})\n    private final Tokenizer tokenizer;\n\n    \/**\n     * Constructor.\n     * @param tokenizer The tokenizer.\n     *\/\n    public Entities(final Tokenizer tokenizer) {\n        this.tokenizer = tokenizer;\n    }\n\n    \/**\n     * Reads one entity.\n     * @return The parsed entity.\n     *\/\n    public Entity one() {\n        final Token token = this.tokenizer.getToken();\n        if (!(token instanceof StringToken)) {\n            throw new IllegalArgumentException(\"Expected string token\");\n        }\n        final String value = ((StringToken) token).getValue();\n        final Entity result;\n        final TypeChecker type = new TypeChecker(value);\n        if (type.isEmpty()) {\n            result = new Empty();\n        } else if (type.isLocator()) {\n            result = new Locator(value);\n        } else if (type.isData()) {\n            result = new Data(Integer.parseInt(value.substring(2), 16));\n        } else if (type.isLambda()) {\n            result = new Lambda(value);\n        } else if (type.isObject()) {\n            result = this.createObject(value);\n        } else {\n            throw new IllegalArgumentException(\"Unknown token\");\n        }\n        return result;\n    }\n\n    \/**\n     * Reads nested entity.\n     * @return The parsed nested entity.\n     *\/\n    public Map<String, Entity> nested() {\n        final Map<String, Entity> result = new HashMap<>();\n        while (true) {\n            final Token token = this.tokenizer.getToken();\n            if (token instanceof BracketToken) {\n                final BracketToken bracket = (BracketToken) token;\n                if (bracket.getState() == BracketToken.BracketType.CLOSE) {\n                    break;\n                }\n            }\n            final String name = ((StringToken) token).getValue();\n            ","groundtruth":"this.tokenizer.next();","right_context":"\n            this.tokenizer.next();\n            final Entity entity = this.one();\n            result.put(name, entity);\n            this.tokenizer.next();\n        }\n        return result;\n    }\n\n    \/**\n     * Creates an object.\n     * @param value The value to parse.\n     * @return The parsed entity.\n     *\/\n    private Entity createObject(final String value) {\n        final Entity result;\n        if (value.contains(\")\")) {\n            result = new FlatObject(\n                value.substring(0, value.indexOf('(')),\n                value.substring(value.indexOf('(') + 1, value.indexOf(')'))\n            );\n        } else if (value.contains(\"(\")) {\n            this.tokenizer.next();\n            final Map<String, Entity> application = this.nested();\n            result = new NestedObject(\n                value.substring(0, value.indexOf('(')), application\n            );\n        } else {\n            result = new FlatObject(value, \"\");\n        }\n        return result;\n    }\n}\n","metadata":{"task_id":"project_cc_java\/4247","repository":"objectionary-flatty-688a3da","file":"src\/main\/java\/org\/objectionary\/parsing\/Entities.java","context_start_lineno":0,"groundtruth_start_lineno":103,"right_context_start_lineno":104},"repo":"objectionary-flatty-688a3da","commit":"688a3da","encode":"objectionary--flatty--688a3da","builder_output":"{\"model_name\":\"codestral-latest\",\"built_prompt\":\"[SUFFIX]\\n            this.tokenizer.next();\\n            final Entity entity = this.one();\\n            result.put(name, entity);\\n            this.tokenizer.next();\\n        }\\n        return result;\\n    }\\n\\n    \/**\\n     * Creates an object.\\n     * @param value The value to parse.\\n     * @return The parsed entity.\\n     *\/\\n    private Entity createObject(final String value) {\\n        final Entity result;\\n        if (value.contains(\\\")\\\")) {\\n            result = new FlatObject(\\n                value.substring(0, value.indexOf('(')),\\n                value.substring(value.indexOf('(') + 1, value.indexOf(')'))\\n            );\\n        } else if (value.contains(\\\"(\\\")) {\\n            this.tokenizer.next();[PREFIX]        } else if (type.isLambda()) {\\n            result = new Lambda(value);\\n        } else if (type.isObject()) {\\n            result = this.createObject(value);\\n        } else {\\n            throw new IllegalArgumentException(\\\"Unknown token\\\");\\n        }\\n        return result;\\n    }\\n\\n    \/**\\n     * Reads nested entity.\\n     * @return The parsed nested entity.\\n     *\/\\n    public Map<String, Entity> nested() {\\n        final Map<String, Entity> result = new HashMap<>();\\n        while (true) {\\n            final Token token = this.tokenizer.getToken();\\n            if (token instanceof BracketToken) {\\n                final BracketToken bracket = (BracketToken) token;\\n                if (bracket.getState() == BracketToken.BracketType.CLOSE) {\\n                    break;\\n                }\\n            }\\n            final String name = ((StringToken) token).getValue();\\n            \",\"snippets\":[[],[]],\"prefix\":\"        } else if (type.isLambda()) {\\n            result = new Lambda(value);\\n        } else if (type.isObject()) {\\n            result = this.createObject(value);\\n        } else {\\n            throw new IllegalArgumentException(\\\"Unknown token\\\");\\n        }\\n        return result;\\n    }\\n\\n    \/**\\n     * Reads nested entity.\\n     * @return The parsed nested entity.\\n     *\/\\n    public Map<String, Entity> nested() {\\n        final Map<String, Entity> result = new HashMap<>();\\n        while (true) {\\n            final Token token = this.tokenizer.getToken();\\n            if (token instanceof BracketToken) {\\n                final BracketToken bracket = (BracketToken) token;\\n                if (bracket.getState() == BracketToken.BracketType.CLOSE) {\\n                    break;\\n                }\\n            }\\n            final String name = ((StringToken) token).getValue();\\n            \",\"suffix\":\"\\n            this.tokenizer.next();\\n            final Entity entity = this.one();\\n            result.put(name, entity);\\n            this.tokenizer.next();\\n        }\\n        return result;\\n    }\\n\\n    \/**\\n     * Creates an object.\\n     * @param value The value to parse.\\n     * @return The parsed entity.\\n     *\/\\n    private Entity createObject(final String value) {\\n        final Entity result;\\n        if (value.contains(\\\")\\\")) {\\n            result = new FlatObject(\\n                value.substring(0, value.indexOf('(')),\\n                value.substring(value.indexOf('(') + 1, value.indexOf(')'))\\n            );\\n        } else if (value.contains(\\\"(\\\")) {\\n            this.tokenizer.next();\",\"completion_options\":{\"stop\":[\"[PREFIX]\",\"[SUFFIX]\",\"\/src\/\",\"#- coding: utf-8\",\"```\"]}}"}
{"prompt":"package com.brinquedomania.api.controllers;\n\nimport com.brinquedomania.api.dtos.SaleRecordDto;\nimport com.brinquedomania.api.models.SaleModel;\nimport com.brinquedomania.api.repositories.CartRepository;\nimport com.brinquedomania.api.repositories.ProductRepository;\nimport com.brinquedomania.api.repositories.SaleRepository;\nimport jakarta.validation.Valid;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDate;\nimport java.util.*;\n\n\n\/**\n * Classe responsavel por implementar as rotas do CONTROLLER da venda.\n *\/\n@RestController\n@CrossOrigin(origins = \"http:\/\/localhost:4200\")\npublic class SaleController {\n\n    \/**\n     * Atributo responsavel por realizar as operacoes de CRUD da venda no banco de dados\n     *\/\n    @Autowired\n    SaleRepository saleRepository;\n\n    \/**\n     * Atributo responsavel por realizar as operacoes de CRUD do carrinho de compras no banco de dados\n     *\/\n    @Autowired\n    CartRepository cartRepository;\n\n    \/**\n     * Atributo responsavel por realizar as operacoes de CRUD do produto no banco de dados\n     *\/\n    @Autowired\n    ProductRepository productRepository;\n\n    \/**\n     * Metodo\/Rota responsavel por realizar o cadastro da venda\n     * @param saleRecordDto - DTO que contem os dados da venda para realizar o cadastro\n     * @return - Retorna a venda que foi cadastrada\n     *\/\n    @PostMapping(\"sale\/register\")\n    public ResponseEntity<Object> saveSale(@RequestBody @Valid SaleRecordDto saleRecordDto){\n        SaleModel saleModel = new SaleModel();\n        BeanUtils.copyProperties(saleRecordDto, saleModel);\n\n        var cart = cartRepository.findByIdClient(saleModel.getIdClient());\n\n        \/**\n         * Verifica se o carrinho de compras esta vazio\n         *\/\n        if (cart.isEmpty() || cart.get().getIdsProducts().isEmpty()){\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Seu carrinho de compras esta vazio. \" +\n                    \"Adicione seus produtos nele para realizar a compra.\");\n        }\n\n        saleModel.setAmount(cart.get().getAmount());\n\n        UUID idSeller = productRepository.findById(cart.get().getIdsProducts().keySet().iterator().next()).get().getIdSeller();\n        ","groundtruth":"saleModel.setIdSeller(idSeller);","right_context":"\n        LocalDate date = LocalDate.now();\n        saleModel.setDate(java.sql.Date.valueOf(date));\n        Map<UUID, Integer> products = cart.get().getIdsProducts();\n\n        \/**\n         * Adiciona os produtos do carrinho de compras na venda\n         *\/\n        for (Map.Entry<UUID, Integer> entry : products.entrySet()) {\n            UUID idProduct = entry.getKey();\n            int quantidade = entry.getValue();\n\n            saleModel.addProduct(idProduct, quantidade);\n        }\n\n        \/**\n          Limpa os produtos carrinho de compras e salva a venda\n         *\/\n        cart.get().clearCart();\n        cart.get().setAmount(0.0F);\n        cartRepository.save(cart.get());\n        return ResponseEntity.status(HttpStatus.CREATED).body(saleRepository.save(saleModel));\n    }\n\n    \/**\n     * Metodo\/Rota responsavel por listar todas as vendas do sistema\n     * @return - Retorna uma lista com todas as vendas do sistema\n     *\/\n    @GetMapping(\"\/sale\/listAll\")\n    public ResponseEntity<List<SaleModel>> getAllSales() {\n        return ResponseEntity.status(HttpStatus.OK).body(saleRepository.findAll());\n    }\n\n    \/**\n     * Metodo\/Rota responsavel por listar todas as vendas de um vendedor, de um cliente ou de uma data especifica\n     * @return - Retorna uma lista com todas as vendas do vendedor\n     *\/\n    @PostMapping(\"\/sale\/listBy\")\n    public ResponseEntity<List<SaleModel>> getSalesBy(@RequestBody Map<String, Object> request) throws ParseException {\n\n        \/**\n         * Verifica se a busca das vendas sera pelo vendedor\n         *\/\n        if (((String) request.get(\"form\")).equals(\"seller\")){\n            UUID id = UUID.fromString((String) request.get(\"value\"));\n            return ResponseEntity.status(HttpStatus.OK).body(saleRepository.findByIdSeller(id));\n\n        }\n\n        \/**\n         * Verifica se a busca das vendas sera pelo cliente\n         *\/\n        else if (((String) request.get(\"form\")).equals(\"client\")){\n            UUID id = UUID.fromString((String) request.get(\"value\"));\n            return ResponseEntity.status(HttpStatus.OK).body(saleRepository.findByIdClient(id));\n        }\n\n        \/**\n         * Verifica se a busca das vendas sera pela data\n         *\/\n        else if (((String) request.get(\"form\")).equals(\"date\")){\n\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n            Date date = sdf.parse((String) request.get(\"value\"));\n            return ResponseEntity.status(HttpStatus.OK).body(saleRepository.findByDate(date));\n        }\n\n        \/**\n<<<<<<< Updated upstream\n         * Caso nao seja nenhuma das opcoes acima, retorna uma lista vazia\n=======\n         * Caso n\u00e3o seja nenhuma das opcoes acima, retorna uma lista vazia\n>>>>>>> Stashed changes\n         *\/\n        else {\n            List<SaleModel> vazia = new ArrayList<>();\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(vazia);\n        }\n    }\n}\n","metadata":{"task_id":"project_cc_java\/2073","repository":"Francisco-Jean-API-BRINQUEDOMANIA-0013ce2","file":"src\/main\/java\/com\/brinquedomania\/api\/controllers\/SaleController.java","context_start_lineno":0,"groundtruth_start_lineno":67,"right_context_start_lineno":68},"repo":"Francisco-Jean-API-BRINQUEDOMANIA-0013ce2","commit":"0013ce2","encode":"Francisco-Jean--API-BRINQUEDOMANIA--0013ce2","builder_output":"{\"model_name\":\"codestral-latest\",\"built_prompt\":\"[SUFFIX]\\n        LocalDate date = LocalDate.now();\\n        saleModel.setDate(java.sql.Date.valueOf(date));\\n        Map<UUID, Integer> products = cart.get().getIdsProducts();\\n\\n        \/**\\n         * Adiciona os produtos do carrinho de compras na venda\\n         *\/\\n        for (Map.Entry<UUID, Integer> entry : products.entrySet()) {\\n            UUID idProduct = entry.getKey();\\n            int quantidade = entry.getValue();\\n\\n            saleModel.addProduct(idProduct, quantidade);\\n        }\\n\\n        \/**[PREFIX]     *\/\\n    @PostMapping(\\\"sale\/register\\\")\\n    public ResponseEntity<Object> saveSale(@RequestBody @Valid SaleRecordDto saleRecordDto){\\n        SaleModel saleModel = new SaleModel();\\n        BeanUtils.copyProperties(saleRecordDto, saleModel);\\n\\n        var cart = cartRepository.findByIdClient(saleModel.getIdClient());\\n\\n        \/**\\n         * Verifica se o carrinho de compras esta vazio\\n         *\/\\n        if (cart.isEmpty() || cart.get().getIdsProducts().isEmpty()){\\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\\\"Seu carrinho de compras esta vazio. \\\" +\\n                    \\\"Adicione seus produtos nele para realizar a compra.\\\");\\n        }\\n\\n        saleModel.setAmount(cart.get().getAmount());\\n\\n        UUID idSeller = productRepository.findById(cart.get().getIdsProducts().keySet().iterator().next()).get().getIdSeller();\\n        \",\"snippets\":[[],[]],\"prefix\":\"     *\/\\n    @PostMapping(\\\"sale\/register\\\")\\n    public ResponseEntity<Object> saveSale(@RequestBody @Valid SaleRecordDto saleRecordDto){\\n        SaleModel saleModel = new SaleModel();\\n        BeanUtils.copyProperties(saleRecordDto, saleModel);\\n\\n        var cart = cartRepository.findByIdClient(saleModel.getIdClient());\\n\\n        \/**\\n         * Verifica se o carrinho de compras esta vazio\\n         *\/\\n        if (cart.isEmpty() || cart.get().getIdsProducts().isEmpty()){\\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\\\"Seu carrinho de compras esta vazio. \\\" +\\n                    \\\"Adicione seus produtos nele para realizar a compra.\\\");\\n        }\\n\\n        saleModel.setAmount(cart.get().getAmount());\\n\\n        UUID idSeller = productRepository.findById(cart.get().getIdsProducts().keySet().iterator().next()).get().getIdSeller();\\n        \",\"suffix\":\"\\n        LocalDate date = LocalDate.now();\\n        saleModel.setDate(java.sql.Date.valueOf(date));\\n        Map<UUID, Integer> products = cart.get().getIdsProducts();\\n\\n        \/**\\n         * Adiciona os produtos do carrinho de compras na venda\\n         *\/\\n        for (Map.Entry<UUID, Integer> entry : products.entrySet()) {\\n            UUID idProduct = entry.getKey();\\n            int quantidade = entry.getValue();\\n\\n            saleModel.addProduct(idProduct, quantidade);\\n        }\\n\\n        \/**\",\"completion_options\":{\"stop\":[\"[PREFIX]\",\"[SUFFIX]\",\"\/src\/\",\"#- coding: utf-8\",\"```\"]}}"}
{"prompt":"package io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport agencias.Agencia;\nimport contas.Conta;\nimport contas.ContaCorrente;\nimport contas.enums.ContasEnum;\nimport extratos.Extrato;\nimport menus.Menu;\nimport pessoas.Cliente;\nimport pessoas.Diretor;\nimport pessoas.Funcionario;\nimport pessoas.Gerente;\nimport pessoas.enums.UsuariosEnum;\nimport principal.SistemaBancario;\nimport segurosDeVida.SeguroDeVida;\n\npublic class Escritor {\n\n\tstatic final String CAMINHO = \".\/comprovantes\/\";\n\tstatic String SUB_CAMINHO = null;\n\tstatic final String EXTENSAO = \".txt\";\n\n\tpublic static void comprovanteSaque(Conta conta, double valorSaque) throws IOException {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaque\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** SAQUE ***************\";\n\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor do saque: R$\" + valorSaque;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************ FIM DO SAQUE ************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void comprovanteDeposito(Conta conta, double valorDeposito) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteDeposito\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"***************** DEP\u00d3SITO *****************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor: R$\" + valorDeposito;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************* FIM DO DEP\u00d3SITO **************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void comprovanteTransferencia(Conta conta, Conta contaDestino, double valorTransferencia) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"\\n*************** TRANSFER\u00caNCIA ***************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"************ DADOS DO REMETENTE *************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome: \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia : \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"********** DADOS DO DESTINAT\u00c1RIO ************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome: \" + contaDestino.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + contaDestino.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + contaDestino.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + contaDestino.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********************************************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor: R$\" + valorTransferencia;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********** FIM DA TRANSFER\u00caNCIA ************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void extratoConta(Conta conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"\\n********************* EXTRATO *********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" ","groundtruth":"+ conta.imprimeCPF(conta.getCpf());","right_context":"\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tbw.append(\"\\n\");\n\t\t\tfor (Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {\n\t\t\t\tbw.append(listaMovimentacao.toString() + \"\\n\");\n\t\t\t}\n\t\t\tbw.append(\"\\n\");\n\n\t\t\tif (conta.getTipoDeConta().equals(ContasEnum.CORRENTE)) {\n\t\t\t\tlinha = \"Total gasto em tributos = R$\"\n\t\t\t\t\t\t+ String.format(\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\n\t\t\tif (Menu.contratoSeguro == true) {\n\t\t\t\tlinha = \"Valor do Seguro de Vida = R$ \" + String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\n\t\t\tlinha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"********************* FIM **************************\\n\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void comprovanteSaldo(Conta conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******************* SALDO *******************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"******************* FIM *********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void relatorioTributacaoCC(ContaCorrente conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"\n\t\t\t\t+ \"relatorioTributacaoCC\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** TOTAL DE TRIBUTA\u00c7\u00d5ES *****************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de saques realizados = \" + conta.getTotalSaques();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de dep\u00f3sitos realizados = \" + conta.getTotalDepositos();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tif (Menu.contratoSeguro == true) {\n\t\t\t\tlinha = \"Valor segurado do Seguro de Vida = R$ \"\n\t\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t\t}\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void rendimentDaPoupanca(Conta conta, Cliente cliente, Double rendimento, int dias,\n\t\t\tdouble valorSimulado, double totalFinal) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******* Simula\u00e7\u00e3o de Rendimento da Poupan\u00e7a ********\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor simulado: R$ \" + String.format(\"%.2f\", valorSimulado);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de dias: \" + dias;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O rendimento seria de: R$ \" + String.format(\"%.2f\", rendimento);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor final seria de: R$ \" + String.format(\"%.2f\", totalFinal);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void relatorioContasPorAgencia(Conta conta, Funcionario funcionario) throws IOException {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioContasPorAgencia\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tint totalContas = 0;\n\t\t\tString linha = \"****************** RESPONS\u00c1VEL **********************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"************ TOTAL DE CONTAS NA AG\u00caNCIA *************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tfor (String cpf : SistemaBancario.mapaDeContas.keySet()) {\n\t\t\t\tif (SistemaBancario.mapaDeContas.get(cpf).getAgencia().getNumAgencia()\n\t\t\t\t\t\t.equals(conta.getAgencia().getNumAgencia())) {\n\n\t\t\t\t\tlinha = \"CPF: \" + SistemaBancario.mapaDeContas.get(cpf).getCpf();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\tlinha = \"Ag\u00eancia : \" + SistemaBancario.mapaDeContas.get(cpf).getAgencia();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\tlinha = \"Conta: \" + SistemaBancario.mapaDeContas.get(cpf).getNumConta();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\ttotalContas++;\n\n\t\t\t\t\tlinha = \"*****************************************************\";\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlinha = \"Total de contas: \" + totalContas;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tbw.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void relatorioClientes(List<Conta> contas, Conta conta, Funcionario funcionario) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\n\t\tString arquivo = conta.getCpf() + \"_\" + hojeFormatado + \"_relatorioDeClientes\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******************* Informa\u00e7\u00f5es dos Clientes *******************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tCollections.sort(contas);\n\t\t\tfor (Conta c : contas) {\n\t\t\t\tlinha = c.getAgencia().getNumAgencia() + \" - \" + c.getTitular();\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\t\t\tlinha = \"****************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void relatorioCapitalBanco(List<Conta> listaContas, Conta conta, Funcionario funcionario) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + hojeFormatado + \"_\" + \"relatorioCapitalBanco\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\t\t\tdouble capitalTotalBanco = 0;\n\t\t\tString linha = \"******** TOTAL DE CAPITAL ARMAZENADO NO BANCO ********\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tfor (Conta lista : listaContas) {\n\t\t\t\tcapitalTotalBanco += lista.getSaldo();\n\t\t\t}\n\n\t\t\tlinha = \"Total do Capital armazenado no banco: R$ \" + capitalTotalBanco;\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"******************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void comprovanteSeguroDeVida(Conta conta, Cliente cliente) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSeguroDeVida\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** COMPROVANTE SEGURO DE VIDA ********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF = \" + Cliente.imprimeCPF(conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor pago na contrata\u00e7\u00e3o do Seguro de Vida foi de: R$ \"\n\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguro());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor segurado ap\u00f3s taxa\u00e7\u00e3o foi de: R$ \"\n\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Voc\u00ea pagou de tarifa R$ \" + String.format(\"%.2f\", SeguroDeVida.getValorTributacao());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void registroDeDadosAtualizados() throws IOException {\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(new FileWriter(\".\\\\database\\\\registrodedados.txt\"))) {\n\n\t\t\t\/\/ registrando as agencias\n\t\t\tSet<Agencia> set = new HashSet<>(SistemaBancario.listaAgencias);\n\t\t\tfor (Agencia ag : set) {\n\t\t\t\tbw.write(\"AGENCIA\" + \";\" + ag.getNumAgencia());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\t\t\n\t\t\t\/\/ Loop pelo mapa de gerente\n\t\t\tfor (Map.Entry<String, Gerente> dadosG : SistemaBancario.mapaDeGerentes.entrySet()) {\n\t\t\t\tGerente gerente = dadosG.getValue();\n\t\t\t\tbw.write(gerente.getTipoDeUsuario().name() + \";\" + gerente.getNome() + \";\" + gerente.getCpf() + \";\"\n\t\t\t\t\t\t+ gerente.getSenha() + \";\" + gerente.getAgencia().getNumAgencia());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t\/\/ Loop pelo mapa de diretor\n\t\t\tfor (Map.Entry<String, Diretor> dadosD : SistemaBancario.mapaDeDiretores.entrySet()) {\n\t\t\t\tDiretor diretor = dadosD.getValue();\n\t\t\t\tbw.write(diretor.getTipoDeUsuario().name() + \";\" + diretor.getNome() + \";\" + diretor.getCpf() + \";\"\n\t\t\t\t\t\t+ diretor.getSenha());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t\/\/ Loop pelo mapa de presidente\n\t\t\tfor (Map.Entry<String, Funcionario> dadosP : SistemaBancario.mapaDeFuncionarios.entrySet()) {\n\t\t\t\tFuncionario presidente = dadosP.getValue();\n\t\t\t\tif (presidente.getTipoDeUsuario() == UsuariosEnum.PRESIDENTE) {\n\t\t\t\t\tbw.write(presidente.getTipoDeUsuario().name() + \";\" + presidente.getNome() + \";\"\n\t\t\t\t\t\t\t+ presidente.getCpf() + \";\" + presidente.getSenha());\n\t\t\t\t\tbw.newLine();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ Loop pelo mapa de cliente\n\t\t\tfor (Map.Entry<String, Cliente> dadosClie : SistemaBancario.mapaDeClientes.entrySet()) {\n\t\t\t\tCliente cliente = dadosClie.getValue();\n\t\t\t\tbw.write(cliente.getTipoDeUsuario().name() + \";\" + cliente.getNome() + \";\" + cliente.getCpf() + \";\"\n\t\t\t\t\t\t+ cliente.getSenha());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t\/\/ Loop pelo mapa de contas\n\t\t\tfor (Map.Entry<String, Conta> entrada : SistemaBancario.mapaDeContas.entrySet()) {\n\t\t\t\tConta conta = entrada.getValue();\n\n\t\t\t\t\/\/ Checando se a conta \u00e9 POUPANCA ou CORRENTE\n\t\t\t\tif (conta.getTipoDeConta() == ContasEnum.POUPANCA || conta.getTipoDeConta() == ContasEnum.CORRENTE) {\n\n\t\t\t\t\t\/\/ Escrevendo detalhes da conta com o saldo atualizado\n\t\t\t\t\tbw.write(conta.getTipoDeConta().name() + \";\" + conta.getAgencia().getNumAgencia() + \";\"\n\t\t\t\t\t\t\t+ conta.getNumConta() + \";\" + conta.getTitular().getTipoDeUsuario().name()+ \";\" + conta.getTitular().getNome()\n\t\t\t\t\t\t\t+ \";\" + conta.getCpf() + \";\" + conta.getTitular().getSenha() + \";\"\n\t\t\t\t\t\t\t+ conta.getCpf() + \";\" + String.format(\"%.2f\", conta.getSaldo()));\n\t\t\t\t\tbw.newLine();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","metadata":{"task_id":"project_cc_java\/1792","repository":"filipe-oliv95-TrabalhoBancoPOO_Grupo7-e86048d","file":"src\/io\/Escritor.java","context_start_lineno":0,"groundtruth_start_lineno":194,"right_context_start_lineno":195},"repo":"filipe-oliv95-TrabalhoBancoPOO_Grupo7-e86048d","commit":"e86048d","encode":"filipe-oliv95--TrabalhoBancoPOO_Grupo7--e86048d","builder_output":"{\"model_name\":\"codestral-latest\",\"built_prompt\":\"[SUFFIX][PREFIX]\\n\\t\\ttry (BufferedWriter bw = new BufferedWriter(\\n\\t\\t\\t\\tnew FileWriter(CAMINHO + \\\"\\\\\\\\\\\" + SUB_CAMINHO + \\\"\\\\\\\\\\\" + arquivo + EXTENSAO, true))) {\\n\\n\\t\\t\\tString linha = \\\"\\\\n********************* EXTRATO *********************\\\";\\n\\t\\t\\tbw.append(linha + \\\"\\\\n\\\");\\n\\n\\t\\t\\tlinha = \\\"Tipo: \\\" + conta.getTipoDeConta();\\n\\t\\t\\tbw.append(linha + \\\"\\\\n\\\");\\n\\n\\t\\t\\tlinha = \\\"Titular: \\\" + conta.getTitular().getNome() + \\\" | CPF: \\\" \",\"snippets\":[[],[]],\"prefix\":\"\\n\\t\\ttry (BufferedWriter bw = new BufferedWriter(\\n\\t\\t\\t\\tnew FileWriter(CAMINHO + \\\"\\\\\\\\\\\" + SUB_CAMINHO + \\\"\\\\\\\\\\\" + arquivo + EXTENSAO, true))) {\\n\\n\\t\\t\\tString linha = \\\"\\\\n********************* EXTRATO *********************\\\";\\n\\t\\t\\tbw.append(linha + \\\"\\\\n\\\");\\n\\n\\t\\t\\tlinha = \\\"Tipo: \\\" + conta.getTipoDeConta();\\n\\t\\t\\tbw.append(linha + \\\"\\\\n\\\");\\n\\n\\t\\t\\tlinha = \\\"Titular: \\\" + conta.getTitular().getNome() + \\\" | CPF: \\\" \",\"suffix\":\"\",\"completion_options\":{\"stop\":[\"[PREFIX]\",\"[SUFFIX]\",\"\/src\/\",\"#- coding: utf-8\",\"```\"]}}"}
{"prompt":"package io;\n\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport agencias.Agencia;\nimport contas.Conta;\nimport contas.ContaCorrente;\nimport contas.enums.ContasEnum;\nimport extratos.Extrato;\nimport menus.Menu;\nimport pessoas.Cliente;\nimport pessoas.Diretor;\nimport pessoas.Funcionario;\nimport pessoas.Gerente;\nimport pessoas.enums.UsuariosEnum;\nimport principal.SistemaBancario;\nimport segurosDeVida.SeguroDeVida;\n\npublic class Escritor {\n\n\tstatic final String CAMINHO = \".\/comprovantes\/\";\n\tstatic String SUB_CAMINHO = null;\n\tstatic final String EXTENSAO = \".txt\";\n\n\tpublic static void comprovanteSaque(Conta conta, double valorSaque) throws IOException {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaque\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** SAQUE ***************\";\n\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor do saque: R$\" + valorSaque;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************ FIM DO SAQUE ************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void comprovanteDeposito(Conta conta, double valorDeposito) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteDeposito\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"***************** DEP\u00d3SITO *****************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha ","groundtruth":"= \"Ag\u00eancia: \" + conta.getAgencia();","right_context":"\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor: R$\" + valorDeposito;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************* FIM DO DEP\u00d3SITO **************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void comprovanteTransferencia(Conta conta, Conta contaDestino, double valorTransferencia) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"\\n*************** TRANSFER\u00caNCIA ***************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"************ DADOS DO REMETENTE *************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome: \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia : \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"********** DADOS DO DESTINAT\u00c1RIO ************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome: \" + contaDestino.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + contaDestino.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + contaDestino.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + contaDestino.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********************************************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor: R$\" + valorTransferencia;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********** FIM DA TRANSFER\u00caNCIA ************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void extratoConta(Conta conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"\\n********************* EXTRATO *********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tbw.append(\"\\n\");\n\t\t\tfor (Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {\n\t\t\t\tbw.append(listaMovimentacao.toString() + \"\\n\");\n\t\t\t}\n\t\t\tbw.append(\"\\n\");\n\n\t\t\tif (conta.getTipoDeConta().equals(ContasEnum.CORRENTE)) {\n\t\t\t\tlinha = \"Total gasto em tributos = R$\"\n\t\t\t\t\t\t+ String.format(\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\n\t\t\tif (Menu.contratoSeguro == true) {\n\t\t\t\tlinha = \"Valor do Seguro de Vida = R$ \" + String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\n\t\t\tlinha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"********************* FIM **************************\\n\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void comprovanteSaldo(Conta conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******************* SALDO *******************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"******************* FIM *********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void relatorioTributacaoCC(ContaCorrente conta) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_\"\n\t\t\t\t+ \"relatorioTributacaoCC\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** TOTAL DE TRIBUTA\u00c7\u00d5ES *****************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de saques realizados = \" + conta.getTotalSaques();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de dep\u00f3sitos realizados = \" + conta.getTotalDepositos();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tif (Menu.contratoSeguro == true) {\n\t\t\t\tlinha = \"Valor segurado do Seguro de Vida = R$ \"\n\t\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t\t}\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void rendimentDaPoupanca(Conta conta, Cliente cliente, Double rendimento, int dias,\n\t\t\tdouble valorSimulado, double totalFinal) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******* Simula\u00e7\u00e3o de Rendimento da Poupan\u00e7a ********\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Valor simulado: R$ \" + String.format(\"%.2f\", valorSimulado);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de dias: \" + dias;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O rendimento seria de: R$ \" + String.format(\"%.2f\", rendimento);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor final seria de: R$ \" + String.format(\"%.2f\", totalFinal);\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void relatorioContasPorAgencia(Conta conta, Funcionario funcionario) throws IOException {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioContasPorAgencia\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tint totalContas = 0;\n\t\t\tString linha = \"****************** RESPONS\u00c1VEL **********************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*****************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"************ TOTAL DE CONTAS NA AG\u00caNCIA *************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tfor (String cpf : SistemaBancario.mapaDeContas.keySet()) {\n\t\t\t\tif (SistemaBancario.mapaDeContas.get(cpf).getAgencia().getNumAgencia()\n\t\t\t\t\t\t.equals(conta.getAgencia().getNumAgencia())) {\n\n\t\t\t\t\tlinha = \"CPF: \" + SistemaBancario.mapaDeContas.get(cpf).getCpf();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\tlinha = \"Ag\u00eancia : \" + SistemaBancario.mapaDeContas.get(cpf).getAgencia();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\tlinha = \"Conta: \" + SistemaBancario.mapaDeContas.get(cpf).getNumConta();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\ttotalContas++;\n\n\t\t\t\t\tlinha = \"*****************************************************\";\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlinha = \"Total de contas: \" + totalContas;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"************************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tbw.close();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void relatorioClientes(List<Conta> contas, Conta conta, Funcionario funcionario) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\n\t\tString arquivo = conta.getCpf() + \"_\" + hojeFormatado + \"_relatorioDeClientes\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"******************* Informa\u00e7\u00f5es dos Clientes *******************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tCollections.sort(contas);\n\t\t\tfor (Conta c : contas) {\n\t\t\t\tlinha = c.getAgencia().getNumAgencia() + \" - \" + c.getTitular();\n\t\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00f5es realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\t\t\tlinha = \"****************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tpublic static void relatorioCapitalBanco(List<Conta> listaContas, Conta conta, Funcionario funcionario) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + funcionario.getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + hojeFormatado + \"_\" + \"relatorioCapitalBanco\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\t\t\tdouble capitalTotalBanco = 0;\n\t\t\tString linha = \"******** TOTAL DE CAPITAL ARMAZENADO NO BANCO ********\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tfor (Conta lista : listaContas) {\n\t\t\t\tcapitalTotalBanco += lista.getSaldo();\n\t\t\t}\n\n\t\t\tlinha = \"Total do Capital armazenado no banco: R$ \" + capitalTotalBanco;\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"******************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void comprovanteSeguroDeVida(Conta conta, Cliente cliente) {\n\n\t\tSUB_CAMINHO = conta.getCpf() + \"_\" + conta.getTitular().getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();\n\t\tnew File(CAMINHO + \"\\\\\" + SUB_CAMINHO).mkdir();\n\n\t\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd_MM_yy\"));\n\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSeguroDeVida\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAMINHO + \"\\\\\" + arquivo + EXTENSAO, true))) {\n\n\t\t\tString linha = \"*************** COMPROVANTE SEGURO DE VIDA ********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Nome = \" + conta.getTitular().getNome();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"CPF = \" + Cliente.imprimeCPF(conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor pago na contrata\u00e7\u00e3o do Seguro de Vida foi de: R$ \"\n\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguro());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"O valor segurado ap\u00f3s taxa\u00e7\u00e3o foi de: R$ \"\n\t\t\t\t\t+ String.format(\"%.2f\", SeguroDeVida.getValorSeguroAposTaxa());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Voc\u00ea pagou de tarifa R$ \" + String.format(\"%.2f\", SeguroDeVida.getValorTributacao());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd\/MM\/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*************************************************************\";\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Erro escrevendo arquivo: \" + e.getMessage());\n\t\t}\n\t}\n\n\tpublic static void registroDeDadosAtualizados() throws IOException {\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(new FileWriter(\".\\\\database\\\\registrodedados.txt\"))) {\n\n\t\t\t\/\/ registrando as agencias\n\t\t\tSet<Agencia> set = new HashSet<>(SistemaBancario.listaAgencias);\n\t\t\tfor (Agencia ag : set) {\n\t\t\t\tbw.write(\"AGENCIA\" + \";\" + ag.getNumAgencia());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\t\t\n\t\t\t\/\/ Loop pelo mapa de gerente\n\t\t\tfor (Map.Entry<String, Gerente> dadosG : SistemaBancario.mapaDeGerentes.entrySet()) {\n\t\t\t\tGerente gerente = dadosG.getValue();\n\t\t\t\tbw.write(gerente.getTipoDeUsuario().name() + \";\" + gerente.getNome() + \";\" + gerente.getCpf() + \";\"\n\t\t\t\t\t\t+ gerente.getSenha() + \";\" + gerente.getAgencia().getNumAgencia());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t\/\/ Loop pelo mapa de diretor\n\t\t\tfor (Map.Entry<String, Diretor> dadosD : SistemaBancario.mapaDeDiretores.entrySet()) {\n\t\t\t\tDiretor diretor = dadosD.getValue();\n\t\t\t\tbw.write(diretor.getTipoDeUsuario().name() + \";\" + diretor.getNome() + \";\" + diretor.getCpf() + \";\"\n\t\t\t\t\t\t+ diretor.getSenha());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t\/\/ Loop pelo mapa de presidente\n\t\t\tfor (Map.Entry<String, Funcionario> dadosP : SistemaBancario.mapaDeFuncionarios.entrySet()) {\n\t\t\t\tFuncionario presidente = dadosP.getValue();\n\t\t\t\tif (presidente.getTipoDeUsuario() == UsuariosEnum.PRESIDENTE) {\n\t\t\t\t\tbw.write(presidente.getTipoDeUsuario().name() + \";\" + presidente.getNome() + \";\"\n\t\t\t\t\t\t\t+ presidente.getCpf() + \";\" + presidente.getSenha());\n\t\t\t\t\tbw.newLine();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\/\/ Loop pelo mapa de cliente\n\t\t\tfor (Map.Entry<String, Cliente> dadosClie : SistemaBancario.mapaDeClientes.entrySet()) {\n\t\t\t\tCliente cliente = dadosClie.getValue();\n\t\t\t\tbw.write(cliente.getTipoDeUsuario().name() + \";\" + cliente.getNome() + \";\" + cliente.getCpf() + \";\"\n\t\t\t\t\t\t+ cliente.getSenha());\n\t\t\t\tbw.newLine();\n\t\t\t}\n\n\t\t\t\/\/ Loop pelo mapa de contas\n\t\t\tfor (Map.Entry<String, Conta> entrada : SistemaBancario.mapaDeContas.entrySet()) {\n\t\t\t\tConta conta = entrada.getValue();\n\n\t\t\t\t\/\/ Checando se a conta \u00e9 POUPANCA ou CORRENTE\n\t\t\t\tif (conta.getTipoDeConta() == ContasEnum.POUPANCA || conta.getTipoDeConta() == ContasEnum.CORRENTE) {\n\n\t\t\t\t\t\/\/ Escrevendo detalhes da conta com o saldo atualizado\n\t\t\t\t\tbw.write(conta.getTipoDeConta().name() + \";\" + conta.getAgencia().getNumAgencia() + \";\"\n\t\t\t\t\t\t\t+ conta.getNumConta() + \";\" + conta.getTitular().getTipoDeUsuario().name()+ \";\" + conta.getTitular().getNome()\n\t\t\t\t\t\t\t+ \";\" + conta.getCpf() + \";\" + conta.getTitular().getSenha() + \";\"\n\t\t\t\t\t\t\t+ conta.getCpf() + \";\" + String.format(\"%.2f\", conta.getSaldo()));\n\t\t\t\t\tbw.newLine();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","metadata":{"task_id":"project_cc_java\/1770","repository":"filipe-oliv95-TrabalhoBancoPOO_Grupo7-e86048d","file":"src\/io\/Escritor.java","context_start_lineno":0,"groundtruth_start_lineno":92,"right_context_start_lineno":93},"repo":"filipe-oliv95-TrabalhoBancoPOO_Grupo7-e86048d","commit":"e86048d","encode":"filipe-oliv95--TrabalhoBancoPOO_Grupo7--e86048d","builder_output":"{\"model_name\":\"codestral-latest\",\"built_prompt\":\"[SUFFIX][PREFIX]\\t\\tnew File(CAMINHO + \\\"\\\\\\\\\\\" + SUB_CAMINHO).mkdir();\\n\\n\\t\\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\\\"dd_MM_yy\\\"));\\n\\t\\tString arquivo = conta.getCpf() + \\\"_\\\" + conta.getAgencia() + \\\"_\\\" + hojeFormatado + \\\"_comprovanteDeposito\\\";\\n\\n\\t\\ttry (BufferedWriter bw = new BufferedWriter(\\n\\t\\t\\t\\tnew FileWriter(CAMINHO + \\\"\\\\\\\\\\\" + SUB_CAMINHO + \\\"\\\\\\\\\\\" + arquivo + EXTENSAO, true))) {\\n\\n\\t\\t\\tString linha = \\\"***************** DEP\u00d3SITO *****************\\\";\\n\\t\\t\\tbw.append(linha + \\\"\\\\n\\\");\\n\\n\\t\\t\\tlinha = \\\"CPF: \\\" + conta.getCpf();\\n\\t\\t\\tbw.append(linha + \\\"\\\\n\\\");\\n\\n\\t\\t\\tlinha \",\"snippets\":[[],[]],\"prefix\":\"\\t\\tnew File(CAMINHO + \\\"\\\\\\\\\\\" + SUB_CAMINHO).mkdir();\\n\\n\\t\\tString hojeFormatado = LocalDate.now().format(DateTimeFormatter.ofPattern(\\\"dd_MM_yy\\\"));\\n\\t\\tString arquivo = conta.getCpf() + \\\"_\\\" + conta.getAgencia() + \\\"_\\\" + hojeFormatado + \\\"_comprovanteDeposito\\\";\\n\\n\\t\\ttry (BufferedWriter bw = new BufferedWriter(\\n\\t\\t\\t\\tnew FileWriter(CAMINHO + \\\"\\\\\\\\\\\" + SUB_CAMINHO + \\\"\\\\\\\\\\\" + arquivo + EXTENSAO, true))) {\\n\\n\\t\\t\\tString linha = \\\"***************** DEP\u00d3SITO *****************\\\";\\n\\t\\t\\tbw.append(linha + \\\"\\\\n\\\");\\n\\n\\t\\t\\tlinha = \\\"CPF: \\\" + conta.getCpf();\\n\\t\\t\\tbw.append(linha + \\\"\\\\n\\\");\\n\\n\\t\\t\\tlinha \",\"suffix\":\"\",\"completion_options\":{\"stop\":[\"[PREFIX]\",\"[SUFFIX]\",\"\/src\/\",\"#- coding: utf-8\",\"```\"]}}"}
